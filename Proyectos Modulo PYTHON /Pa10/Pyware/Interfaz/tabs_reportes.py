
import os
import tkinter as tk
from tkinter import ttk
import pandas as pd
import numpy as np
import matplotlib
matplotlib.use("TkAgg")
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

from .state import ruta_csv_actual
from analysis.stats import cargar_y_procesar_csv

# interpretaci√≥n 

def etiqueta_corr(r: float) -> tuple[str, str]:
    """Devuelve (nivel, color_hex) seg√∫n magnitud de correlaci√≥n."""
    a = abs(r)
    if a > 0.7:  return ("muy fuerte", "#D32F2F")
    if a > 0.5:  return ("fuerte", "#F57C00")
    if a > 0.3:  return ("moderada", "#FBC02D")
    if a > 0.1:  return ("d√©bil", "#7CB342")
    return ("muy d√©bil / nula", "#388E3C")

def linea_explicacion_corr(variable: str, r: float) -> str:
    nivel, _ = etiqueta_corr(r)
    direccion = "positiva" if r >= 0 else "negativa"
    return f"‚Ä¢ {variable}: r = {r:.2f} ‚Üí relaci√≥n {nivel} {direccion}."

def _fig_to_tk(frame_parent: tk.Frame, fig: plt.Figure, titulo: str, comentario: str | None = None):
    """Inserta una figura matplotlib dentro de un frame Tkinter con t√≠tulo y comentario."""
    caja = tk.Frame(frame_parent, bg="white")
    caja.pack(fill="x", padx=20, pady=15)

    if titulo:
        tk.Label(caja, text=titulo, font=("Arial", 13, "bold"), fg="#1976D2", bg="white").pack(anchor="w", pady=(0,8))

    lienzo = FigureCanvasTkAgg(fig, master=caja)
    lienzo.draw()
    widget = lienzo.get_tk_widget()
    widget.pack(fill="both", expand=True)

    if comentario:
        tk.Label(caja, text=comentario, font=("Arial", 10), bg="white", fg="#555555", wraplength=900, justify="left")\
          .pack(anchor="w", pady=(6,0))

def _top_corr(matriz: pd.DataFrame, col: str, k: int = 5) -> pd.Series:
    if col not in matriz.columns:
        return pd.Series(dtype=float)
    s = matriz[col].drop(labels=[col], errors="ignore").dropna()
    return s.reindex(s.abs().sort_values(ascending=False).head(k).index)


def mostrar_reportes(panel_contenedor: tk.Frame):
    for w in panel_contenedor.winfo_children():
        w.destroy()

    nombre_archivo = ruta_csv_actual()
    if not os.path.exists(nombre_archivo):
        tk.Label(panel_contenedor, text="No hay datos del usuario.\nRegistra tus s√≠ntomas o usa la pesta√±a de simulaci√≥n.",
                 font=("Arial", 14), fg="gray", bg="white", justify="center").pack(expand=True, pady=50)
        return

    res = cargar_y_procesar_csv(nombre_archivo)
    if res is None:
        tk.Label(panel_contenedor, text="Error al procesar datos. Verifica el CSV.", font=("Arial", 14),
                 fg="red", bg="white").pack(expand=True, pady=50)
        return

    df, df_num, matriz, t_clima, corr_sf = res

    
    canvas = tk.Canvas(panel_contenedor, bg="white")
    scrollbar = ttk.Scrollbar(panel_contenedor, orient="vertical", command=canvas.yview)
    marco = tk.Frame(canvas, bg="white")
    scrollbar.pack(side="right", fill="y")
    canvas.pack(side="left", fill="both", expand=True)
    canvas.create_window((0, 0), window=marco, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar.set)
    marco.bind("<Configure>", lambda e: canvas.configure(scrollregion=canvas.bbox("all")))

    tk.Label(marco, text="Reporte Visual e Interpretativo",
             font=("Arial", 16, "bold"), fg="#4B0082", bg="white").pack(pady=18, padx=20, anchor="w")

    # 1) Heatmap correlaciones
    fig1, ax1 = plt.subplots(figsize=(10, 8))
    sns.heatmap(matriz, annot=True, fmt=".2f", cmap="coolwarm", ax=ax1)
    ax1.set_title("Matriz de correlaci√≥n entre variables cl√≠nicas")
    _fig_to_tk(marco, fig1, "Matriz de correlaci√≥n",
               "Colores rojos = relaci√≥n positiva; azules = negativa; m√°s intenso = mayor fuerza. "
               "Recuerda: correlaci√≥n no implica causalidad.")

    # 2) Dolor seg√∫n clima adverso (boxplot)
    if "clima_adverso" in df.columns and "dolor_score" in df.columns:
        fig2, ax2 = plt.subplots(figsize=(6.4, 5))
        sns.boxplot(x='clima_adverso', y='dolor_score', data=df, ax=ax2)
        ax2.set_title(f"Dolor seg√∫n el clima adverso (p-valor t-test = {t_clima.get('p_val', 1.0):.4f})")
        ax2.set_xlabel("Clima adverso (1 = S√≠, 0 = No)")
        ax2.set_ylabel("Dolor")
        comentario = "Si la separaci√≥n entre cajas es clara y el p-valor es < 0.05, hay evidencia de diferencia en el dolor entre d√≠as con y sin clima adverso."
        _fig_to_tk(marco, fig2, "Dolor vs Clima Adverso", comentario)

    # 3) Sue√±o (d√≠a anterior) vs Fatiga (dispersi√≥n)
    if "sueno_score" in df.columns and "fatiga_score" in df.columns:
        x = df['sueno_score'].shift(1)
        y = df['fatiga_score']
        mask = ~x.isna() & ~y.isna()
        fig3, ax3 = plt.subplots(figsize=(6.4, 5))
        ax3.scatter(x[mask], y[mask], alpha=0.7)
        ax3.set_title(f"Sue√±o (d√≠a anterior) vs Fatiga (hoy) ¬∑ r = {corr_sf:.2f}")
        ax3.set_xlabel("Sue√±o (d√≠a anterior)")
        ax3.set_ylabel("Fatiga (hoy)")
        nivel, color = etiqueta_corr(corr_sf)
        comentario = f"Correlaci√≥n {nivel}. Valores negativos sugieren que un mejor sue√±o ayer se asocia con menor fatiga hoy."
        _fig_to_tk(marco, fig3, "Sue√±o ‚Üî Fatiga (desfase 1 d√≠a)", comentario)

    # 4) Evoluci√≥n temporal dolor y fatiga
    if "fecha" in df.columns and "dolor_score" in df.columns and "fatiga_score" in df.columns:
        fig4, ax4 = plt.subplots(figsize=(10, 5))
        ax4.plot(df['fecha'], df['dolor_score'], label="Dolor", linewidth=2)
        ax4.plot(df['fecha'], df['fatiga_score'], label="Fatiga", linewidth=2)
        ax4.set_title("Evoluci√≥n temporal del dolor y la fatiga")
        ax4.set_xlabel("Fecha"); ax4.set_ylabel("Nivel")
        ax4.legend()
        _fig_to_tk(marco, fig4, "Series temporales (Dolor y Fatiga)",
                   "√ötil para detectar brotes (picos), tendencias o mejoras sostenidas.")

    # 5) Distribuci√≥n del estado de √°nimo
    if "estado_animo_score" in df.columns:
        fig5, ax5 = plt.subplots(figsize=(6.4, 4.2))
        sns.histplot(df['estado_animo_score'], bins=10, kde=True, ax=ax5)
        ax5.set_title("Distribuci√≥n del estado de √°nimo")
        ax5.set_xlabel("Puntaje de √°nimo"); ax5.set_ylabel("Frecuencia")
        _fig_to_tk(marco, fig5, "Estado de √Ånimo",
                   "Curva KDE (l√≠nea) muestra la forma de la distribuci√≥n. Sesgos hacia valores bajos pueden indicar periodos dif√≠ciles.")

    # 6) Dolor promedio por tipo de dieta
    if "dieta_tipo" in df.columns and "dolor_score" in df.columns:
        fig6, ax6 = plt.subplots(figsize=(6.4, 4.2))
        sns.barplot(x='dieta_tipo', y='dolor_score', data=df, estimator=np.mean, ci=None, ax=ax6)
        ax6.set_title("Dolor promedio seg√∫n tipo de dieta")
        ax6.set_xlabel("Tipo de dieta"); ax6.set_ylabel("Promedio de dolor")
        _fig_to_tk(marco, fig6, "Dieta ‚Üî Dolor",
                   "Barras m√°s bajas en ‚ÄòAntiinflamatoria‚Äô apoyan el beneficio potencial de ese patr√≥n alimentario.")

    # 7) Actividad f√≠sica vs dolor
    if "actividad_fisica" in df.columns and "dolor_score" in df.columns:
        fig7, ax7 = plt.subplots(figsize=(6.4, 5))
        sns.scatterplot(x='actividad_fisica', y='dolor_score', data=df, ax=ax7)
        ax7.set_title("Actividad f√≠sica vs nivel de dolor")
        ax7.set_xlabel("Actividad f√≠sica (0 = No, 1 = S√≠)"); ax7.set_ylabel("Dolor")
        _fig_to_tk(marco, fig7, "Actividad F√≠sica ‚Üî Dolor",
                   "Si los puntos con ‚Äò1‚Äô tienden a estar m√°s bajos, sugiere que moverse se asocia a menos dolor (no prueba causalidad).")

    # 8) Top 5 correlaciones con el dolor (barras)
    if "dolor_score" in matriz.columns:
        top_corr = _top_corr(matriz, "dolor_score", k=5)
        fig8, ax8 = plt.subplots(figsize=(7.2, 4))
        pal = sns.color_palette("mako", n_colors=len(top_corr))
        sns.barplot(x=top_corr.values, y=top_corr.index, palette=pal, ax=ax8)
        ax8.set_title("Top 5 variables m√°s correlacionadas con el dolor")
        ax8.set_xlabel("Coeficiente de correlaci√≥n")
        _fig_to_tk(marco, fig8, "Variables m√°s relacionadas con el dolor",
                   "Estas son las se√±ales lineales m√°s fuertes en tus datos. √ösalas como punto de partida para hip√≥tesis.")

    # 9) Bloque de explicaciones breve (dolor, fatiga, √°nimo, ISA)
    explicaciones = tk.Frame(marco, bg="#F7F9FC")
    explicaciones.pack(fill="x", padx=20, pady=15)
    tk.Label(explicaciones, text="üí° C√≥mo leer las correlaciones",
             font=("Arial", 13, "bold"), bg="#F7F9FC").pack(anchor="w", pady=(10,6))
    tk.Label(explicaciones, text=(
        "‚Ä¢ r va de -1 a 1. Positivo: cuando sube A, tiende a subir B. Negativo: cuando sube A, tiende a bajar B.\n"
        "‚Ä¢ Magnitud: |r| ‚â§ 0.10 muy d√©bil; ‚â§ 0.30 d√©bil; ‚â§ 0.50 moderada; ‚â§ 0.70 fuerte; > 0.70 muy fuerte.\n"
        "‚Ä¢ Correlaci√≥n ‚â† causalidad. √ösalo para generar hip√≥tesis, no como prueba definitiva."
    ), font=("Arial", 10), bg="#F7F9FC", justify="left").pack(anchor="w", pady=(0,12))
